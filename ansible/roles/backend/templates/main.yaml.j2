apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ backend_label }}-config"
  namespace: "{{ backend_namespace }}-{{ backend_environment }}"
  labels:
    app: "{{ backend_label }}"
data:
  DB_HOST: "{{ backend_db_host }}"
  DB_PORT: "{{ backend_db_port }}"
  DB_NAME: "{{ backend_db_name }}"

--- 

apiVersion: v1
kind: Secret
metadata:
  name: "{{ backend_label }}-secret"
  namespace: "{{ backend_namespace }}-{{ backend_environment }}"
  labels:
    app: "{{ backend_label }}"
type: Opaque
stringData:
  DB_USER: "{{ backend_db_username }}"
  DB_PASSWORD: "{{ backend_db_password }}"

---

apiVersion: v1
kind: Service
metadata:
  name: "{{ backend_label }}-svc"
  namespace: "{{ backend_namespace }}-{{ backend_environment }}"
  labels:
    app: "{{ backend_label }}"
  annotations:
    description: "Backend Service"
spec:
  selector:
    app: "{{ backend_label }}"
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ backend_label }}-deployment"
  namespace: "{{ backend_namespace }}-{{ backend_environment }}"
  labels:
    app: "{{ backend_label }}"
  annotations:
    description: "Backend deployment"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: "{{ backend_label }}"
  template:
    metadata:
      labels:
        app: "{{ backend_label }}"    
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: "{{ backend_app_node }}"
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "app"
        effect: "NoSchedule"
      - key: "workload"
        operator: "Equal"
        value: "database"
        effect: "NoSchedule"
      containers:
      - name: "{{ backend_label }}" 
        image: "{{ backend_image }}"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
{% for env_var in backend_env_vars %}
        - name: {{ env_var.name }}
          value: {{ env_var.value | to_json }}
{% endfor %}
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "250m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: {{ backend_namespace }}-{{ backend_environment }}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: {{ backend_label }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ backend_label }}-feature-flags"
  namespace: "{{ backend_namespace }}-{{ backend_environment }}"
data:
  FEATURE_X_ENABLED: "false"
  FEATURE_Y_ENABLED: "true"
  
---

apiVersion: batch/v1
kind: Job
metadata:
  name: backend-migrate
  namespace: {{ backend_namespace }}-{{ backend_environment }}
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrate
        image: {{ backend_image }}
        command: ["npm", "run", "migrate"]
        env:
{% for env_var in backend_env_vars %}
        - name: {{ env_var.name }}
          value: {{ env_var.value | to_json }}
{% endfor %}

---

apiVersion: batch/v1
kind: Job
metadata:
  name: backend-rollback
  namespace: {{ backend_namespace }}-{{ backend_environment }}
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: rollback
        image: {{ backend_image }}
        command: ["npm", "run", "rollback"]
        env:
{% for env_var in backend_env_vars %}
        - name: {{ env_var.name }}
          value: {{ env_var.value | to_json }}
{% endfor %}
